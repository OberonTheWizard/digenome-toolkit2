#!/ldisk1/yamagu/DigenomeSeq/analysis/env/bin/python

import os
import sys
import subprocess
from sys import argv
import pysam
import time
import argparse

#default parameter
args = None
chrom_list=[]

#environment variable
try:
    digenome_home = os.environ['DIGENOME_HOME']
    if digenome_home[-1] != '/':
        digenome_home += '/'
except:
    print 'warning: DIGENOME_HOME environment variable is not set, using current dir...'
    digenome_home = './'

#fuc_steps    
steps = []
fuc_result = ''
def checkTime(func):
    def wrapped(*args, **kwargs):
        try:
            # sys.stdout.write('Running: %s...\n' % func.__name__)
            start_time = time.time()
            func(*args, **kwargs)
            # sys.stdout.write('Finished.\n')
            end_time = time.time()
            # sys.stdout.write("\n#############################################\n")
            # sys.stdout.write("Elapsed Time: %0.2f\n\n"%(end_time - start_time))
        except KeyboardInterrupt:
            sys.stdout.write("KeyboardInterrupt\n")
            raise SystemExit()
        except IOError:
            sys.stdout.write("IOError\n")
            raise SystemExit()

    steps.append(wrapped)
    return wrapped
    
@checkTime
def get_chrom_list():
    with pysam.Samfile(args.bam_file_path, "rb") as f:
        for item in f.header['SQ']:
            try:
                if item['SN'] != "*":
                    chrom_list.append(item['SN'])
            except:
                pass
    # print ("\nTotal chromosomes: %d"%(len(chrom_list)))
@checkTime
def find_position_bam():
    cmd = '{0}1.find_position_bam {1} {2}'
    print(cmd.format(digenome_home, "-p "+args.prefix if args.prefix != "" else args.prefix , args.bam_file_path))
    # fuc_result = subprocess.check_output(cmd.format(digenome_home, "-p "+args.prefix if args.prefix != "" else args.prefix , args.bam_file_path), stderr=subprocess.STDOUT,shell=True)
    # print fuc_result
    
@checkTime
def sort():
    cmd = 'python {0}2.sort.py {1}{2}_reverse.txt'
    for chrom in chrom_list:
        print(cmd.format(digenome_home, args.prefix, chrom))
        # app = subprocess.Popen(cmd.format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()

@checkTime
def count():
    cmd = ['python {0}3.count.py -u {1} {2}{3}_forward.txt','python {0}3.count.py -u {1} {2}{3}_reverse_sorted.txt']
    for chrom in chrom_list:
        print(cmd[0].format(digenome_home, args.range_sum, args.prefix, chrom))
        # app = subprocess.Popen(cmd[0].format(digenome_home, args.range_sum, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        print(cmd[1].format(digenome_home, args.range_sum, args.prefix, chrom))
        # app = subprocess.Popen(cmd[1].format(digenome_home, args.range_sum, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        #    fuc_result = subprocess.check_output(cmd[0].format(digenome_home, args.range_sum, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)
        #    fuc_result = subprocess.check_output(cmd[1].format(digenome_home, args.range_sum, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)

@checkTime
def cut_threshold():
    cmd = ['python {0}4.cut_threshold.py {1}{2}_forward_freq.txt %d'%args.count_cutoff,'python {0}4.cut_threshold.py {1}{2}_reverse_sorted_freq.txt %d'%args.count_cutoff]
    for chrom in chrom_list:    
        print(cmd[0].format(digenome_home, args.prefix, chrom))
        # app = subprocess.Popen(cmd[0].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        print(cmd[1].format(digenome_home, args.prefix, chrom))
        # app = subprocess.Popen(cmd[1].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd[0].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)
        # fuc_result = subprocess.check_output(cmd[1].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)

@checkTime
def coverage():
    # cmd = 'python {0}5.coverage.py {1} {2}'
    # print(cmd.format(digenome_home, args.prefix, args.bam_file_path))

    # run 5.coverage by 5 threads
    cmd = 'java Coverage5 {1} 5'
    print(cmd.format(digenome_home, args.bam_file_path))
    # app = subprocess.Popen(cmd.format(digenome_home, args.prefix, args.bam_file_path), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
    # app.wait()
    # out, errs = app.communicate()
    # fuc_result = subprocess.check_output(cmd.format(digenome_home, args.prefix, args.bam_file_path), stderr=subprocess.STDOUT,shell=True)

@checkTime
def get_depth():
    """
    try:
        print('Removing {0}forward.txt and {0}reverse.txt if exist...'.format(pre_prefix))
        os.remove('{0}forward.txt'.format(pre_prefix))
        os.remove('{0}reverse.txt'.format(pre_prefix))
    except:
        pass
    """
    for chrom in chrom_list:
        cmd = ['python {0}6.get_depth.py -d forward {1}{2}_forward_freq_from_%d.txt {1}{2}_depth.txt'%args.count_cutoff,'python {0}6.get_depth.py -d reverse {1}{2}_reverse_sorted_freq_from_%d.txt {1}{2}_depth.txt'%args.count_cutoff]
        # app = subprocess.Popen(cmd[0].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        print(cmd[0].format(digenome_home, args.prefix, chrom))
        # app.wait()
        # out, errs = app.communicate()
        # app = subprocess.Popen(cmd[1].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        print(cmd[1].format(digenome_home, args.prefix, chrom))
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd[0].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)
        # fuc_result = subprocess.check_output(cmd[1].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)

@checkTime
def ana_depth():
    cmd = ['python {0}7.ana_depth.py -d forward {1}','python {0}7.ana_depth.py -d reverse {1}']
    fns = ['{0}{1}_forward_freq_from_{2}.txt'.format(args.prefix, chrom, args.count_cutoff) for chrom in chrom_list]
    print(cmd[0].format(digenome_home, ' '.join(fns)))
    # app = subprocess.Popen(cmd[0].format(digenome_home, ' '.join(fns)), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
    # app.wait()
    # out, errs = app.communicate()
    fns = ['{0}{1}_reverse_sorted_freq_from_{2}.txt'.format(args.prefix, chrom, args.count_cutoff ) for chrom in chrom_list]
    print(cmd[1].format(digenome_home, ' '.join(fns)))
    # app = subprocess.Popen(cmd[1].format(digenome_home, ' '.join(fns)), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
    # app.wait()
    # out, errs = app.communicate()
    # fuc_result = subprocess.check_output(cmd[0].format(digenome_home, ' '.join(fns)), stderr=subprocess.STDOUT,shell=True)
    # fuc_result = subprocess.check_output(cmd[1].format(digenome_home, ' '.join(fns)), stderr=subprocess.STDOUT,shell=True)

@checkTime
def count_1_depth():
    cmd = ['python {0}8.count-1_depth.py {1}{2}_forward_freq_from_%d_ana.txt'%args.count_cutoff,'python {0}8.count-1_depth.py {1}{2}_reverse_sorted_freq_from_%d_ana.txt'%args.count_cutoff]
    for chrom in chrom_list:
        print(cmd[0].format(digenome_home, args.prefix, chrom))
        # app = subprocess.Popen(cmd[0].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        print(cmd[1].format(digenome_home, args.prefix, chrom))
        # app = subprocess.Popen(cmd[1].format(digenome_home, args.prefix, chrom), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd[0].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)
        # fuc_result = subprocess.check_output(cmd[1].format(digenome_home, args.prefix, chrom), stderr=subprocess.STDOUT,shell=True)

@checkTime
def digenome_score():
    cmd = 'python {0}9.digenome_score.py {1}{2}_forward_freq_from_%d_ana_count-1.txt {1}{2}_reverse_sorted_freq_from_%d_ana_count-1.txt {2} {1} {3}'%(args.count_cutoff,args.count_cutoff)
    for chrom in chrom_list:
        print(cmd.format(digenome_home, args.prefix, chrom, args.overhang))
        # app = subprocess.Popen(cmd.format(digenome_home, args.prefix, chrom, args.overhang), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd.format(digenome_home, args.prefix, chrom, args.overhang), stderr=subprocess.STDOUT,shell=True)

@checkTime
def combining():
    cmd = 'python {0}10.combining.py {1}{2}_forward_freq_from_%d_ana_count-1_digenome_score.txt {1}{2}_reverse_sorted_freq_from_%d_ana_count-1_digenome_score.txt {2} {3} {1} {4}'%(args.count_cutoff,args.count_cutoff)
    for chrom in chrom_list:
	print(cmd.format(digenome_home, args.prefix, chrom, args.bam_file_path, args.overhang))
        # app = subprocess.Popen(cmd.format(digenome_home, args.prefix, chrom, args.bam_file_path, args.overhang), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd.format(digenome_home, args.prefix, chrom, args.bam_file_path, args.overhang), stderr=subprocess.STDOUT,shell=True)

@checkTime
def merging():
    cmd = 'python {0}11.merging.py {1} {2} {3}'
    for chrom in chrom_list:
        print(cmd.format(digenome_home, args.bam_file_path, chrom, args.prefix))
        # app = subprocess.Popen(cmd.format(digenome_home, args.bam_file_path, chrom, args.prefix), stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,env={"PATH":"/ldisk1/yamagu/usr/src/digenome-toolkit2-hotfix/"})
        # app.wait()
        # out, errs = app.communicate()
        # fuc_result = subprocess.check_output(cmd.format(digenome_home, args.bam_file_path, chrom, args.prefix), stderr=subprocess.STDOUT,shell=True)

        
def digenome_run():
    #start_time = time.time()
    #steps=[func] 0~9
    #print("digenome_run()")
    #print args.step
    #print range(args.step-1, 10)
    if args.step != 1 :
	steps[0]()   
    for st in range(args.step-1, 12):
        steps[st]()
    #end_time = time.time()

    #print('######################################')
    #print('Total Elasped time:%0.2f sec.'%(end_time - start_time))

#main
if __name__ == '__main__':
    print '#digenome-toolkit v2.0'
    print '#Usage: type digenome -h or --help'

    #parser
    parser = argparse.ArgumentParser(prog="digenome-run")
    parser.add_argument("-p", "--prefix", type=str, 
                        help="prefix")
    
    parser.add_argument("-r", "--ratio_cutoff", type=float, default=20.0,
                        help="ratio_cutoff (default: %(default)s)")
    parser.add_argument("-c", "--count_cutoff", type=int, default=2,
                        help="count_cutoff (default: %(default)s)")
    parser.add_argument("-u", "--range_sum", type=int, default=1,
                        help="range_sum (default: %(default)s)")
    parser.add_argument("-s", "--step", type=int, choices=xrange(1,13),default=1,
                        help="step (default: %(default)s)")
    parser.add_argument("-o", "--overhang", type=int, default=1,
                        help="overhang e.g. SpCas9=1, ZFN=4, Cpf1=2 (default: %(default)s)")
    parser.add_argument("bam_file_path", type=str,
                        help="Please specify bam_file_path")
    
    #Unused arguments
    """
    parser.add_argument("--sum_cutoff", type=bool, default=False,
                        help="sum_cutoff")
    parser.add_argument("-d", "--difference", type=int, default=1,
                        help="difference (default: %(default)s)")
    """
    args = parser.parse_args()
    
    #prefix default
    if args.prefix != None:
        args.prefix = "./"+ args.prefix + "_"
    else:
        args.prefix = "./"
    
    # print args#should be deleted
        
    #digenome_run
    try:
        digenome_run()
    except KeyboardInterrupt as detail:
        print "Quitting digenome_run.", detail
        raise SystemExit()
